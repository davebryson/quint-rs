use crate::{QuintEx, QuintDeclaration, QuintVar};
use crate::utils::QuintIdGenerator;
use crate::lexer::{Token, LexicalError};

grammar(helper: &mut QuintIdGenerator);


QuintDeclaration: QuintDeclaration = {
  "var" <name:"identifier"> ":" "int" => {
    QuintDeclaration::QuintVar(
      QuintVar{
        id: helper.get_id(), 
        name: name.into(), 
        imported_from: None, 
        namespaces: None
      }
    )
  }
}


// TODO: check precedence
pub QuintEx: QuintEx = {
    #[precedence(level="1")]
    ExpTerm,

    #[precedence(level="2")] #[assoc(side="left")]
    <lhs:QuintEx> "*" <rhs:QuintEx> => {
        QuintEx::QuintApp{
          id: helper.get_id(), 
          opcode: "imul".into(), 
          args: vec![lhs, rhs]
        }
    },
    #[precedence(level="2")] #[assoc(side="left")]
    <lhs:QuintEx> "/" <rhs:QuintEx> => {
        QuintEx::QuintApp{
          id: helper.get_id(), 
          opcode: "idiv".into(), 
          args: vec![lhs, rhs]
        }
    },
    #[precedence(level="3")] #[assoc(side="left")]
    <lhs:QuintEx> "+" <rhs:QuintEx> => {
        QuintEx::QuintApp{
          id: helper.get_id(), 
          opcode: "iadd".into(), 
          args: vec![lhs, rhs]
        }
    },
    <lhs:QuintEx> "-" <rhs:QuintEx> => {
        QuintEx::QuintApp{
          id: helper.get_id(), 
          opcode: "isub".into(), 
          args: vec![lhs, rhs]
        }
    },
}

ExpTerm: QuintEx = {
  <value:"int"> => {
    QuintEx::QuintInt{id: helper.get_id(), value}
  },
  <value:"str"> => {
    QuintEx::QuintStr{id: helper.get_id(), value: value.into()}
  },
  <value:"bool"> => {
    QuintEx::QuintBool{id: helper.get_id(), value}
  },
  <name:"identifier"> => {
    QuintEx::QuintName{id: helper.get_id(), name: name.into()}
  },
   "(" <e:QuintEx> ")" => e
}



// Lexer
extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "module" => Token::Module,
    "var" => Token::Var,
    "identifier" => Token::LowId(<String>),
    "cap_id" => Token::CapId(<String>),
    "int" => Token::Int(<i64>),
    "str" => Token::String(<String>),
    "bool" => Token::Bool(<bool>),
    "(" => Token::LParen,
    ")" => Token::RParen,
    "=" => Token::Assign,
    "+" => Token::Add,
    "-" => Token::Sub,
    "*" => Token::Mul,
    "/" => Token::Div,
    ":" => Token::Colon,
  }
}
