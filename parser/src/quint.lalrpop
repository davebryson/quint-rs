use crate::{QuintEx, QuintName};
use crate::utils::QuintIdGenerator;
use crate::lexer::{Token, LexicalError};

grammar(id: &mut QuintIdGenerator);

// Change entry to pub Quint:
// Using tiers, you work from bottom up...
// reverse of below...
// 
// So, Term, would be the last tier called
// 

pub Expression: QuintEx = {
    // need to refactor out the few below
    <lhs: Term> "->" <rhs:Term> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "Tup".into(),
            args: vec![lhs,rhs]
        }
    },
    Tuple,
    //Record,
    IfThenExp,
}

// Format: {a: 1, b: 2}

KeyValue: Vec<QuintEx> = {
    <lhs:Identifier> ":" <rhs:Expression> ","? => {
        let mut v = Vec::new();
        let k = QuintEx::QuintStr{id: id.get(), value: lhs};
        v.push(k);
        v.push(rhs);
        v
    },
}

Record: QuintEx = {
    "{" <a:KeyValue> "}" => {
        QuintEx::QuintApp {
            id:id.get(), 
            opcode: "Rec".into(),
            args: a,
        }
    },
}

// *** Expressions *** // 
IfThenExp: QuintEx = {
    "if" <a:AndOrExp> <b:Term> "else" <c:Term> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "ite".into(),
            args: vec![a,b,c],
        }
    },
    AndOrExp,
}

AndOrOps: QuintName = {
    "and" => "and".into(),
    "or" => "or".into(),
    "implies" => "implies".into(),
    "iff" => "iff".into()
}
AndOrExp: QuintEx = {
    <lhs:Expression> <opcode: AndOrOps> <rhs:RelationshipExp> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode,
            args: vec![lhs, rhs],
        }
    },
    "and" "{" <args:CommaOne<RelationshipExp>> "}" => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "and".into(), 
            args,
        }
    },
    "or" "{" <args:CommaOne<RelationshipExp>> "}" => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "or".into(), 
            args,
        }
    },
    "all" "{" <args:CommaOne<RelationshipExp>> "}" => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "actionAll".into(), 
            args,
        }
    },
    "any" "{" <args:CommaOne<RelationshipExp>> "}" => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "actionAny".into(), 
            args,
        }
    },
    RelationshipExp,
}

// Prime Assignment
// TODO: this will have an opcode of 'assign' and 2 args. 
// But not sure how this is related to the var that must be declared - 
// and this happens in an action
//PrimeExp: QuintEx = {
//    <lhs: Identifier> "'" "=" <rhs:RelationshipExp> => {
//        QuintEx::QuintApp{
//            id:id.get(), 
//            opcode, 
//            args: vec![lhs, rhs],
//        }
//    },
//    RelationshipExp,
//}

// Relations
RelationshipOps: QuintName = {
    ">" => "igt".into(),
    ">=" => "igte".into(),
    "<" => "ilt".into(),
    "<=" => "ilte".into(),
    "!=" => "neq".into(),
    "==" => "eq".into(),
}
RelationshipExp: QuintEx = {
    <lhs:RelationshipExp> <opcode: RelationshipOps> <rhs:ArithmeticExp> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode, 
            args: vec![lhs, rhs],
        }
    },
    ArithmeticExp,
}

ArithmeticOps: QuintName = {
    "+" => "iadd".into(),
    "-" => "isub".into(),
}
ArithmeticExp: QuintEx = {
    <lhs:ArithmeticExp> <opcode: ArithmeticOps> <rhs:MulDivModExp> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode, 
            args: vec![lhs, rhs],
        }
    },
    MulDivModExp,
}

MulDivModOps: QuintName = {
    "*" => "imul".into(),
    "/" => "idiv".into(),
    "%" => "imod".into(),
}
MulDivModExp: QuintEx = {
    <lhs:MulDivModExp> <opcode: MulDivModOps> <rhs:Term> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode, 
            args: vec![lhs, rhs],
        }
    },
    PowUnaryExp,
}

// right associative
PowUnaryExp: QuintEx = {
    "-" <rhs:Term> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "iuminus".into(), 
            args:  vec![rhs],
        }
    },
    <lhs:MulDivModExp> "^" <rhs:Term> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "ipow".into(), 
            args:  vec![lhs, rhs],
        }
    },
    DotCall,
}

// dotCall
// Can be:
// [].tail().nth(1)
DotCall: QuintEx = {
    <n: CallName> "(" <args:Comma<DotCall>> ")" => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: n, 
            args,
        }
    },

    <n:DotCall> "." <opcode: CallName> "(" <mut args:Comma<DotCall>> ")" => {
        let mut v = vec![n];
        v.append(&mut args);
        QuintEx::QuintApp{
            id: id.get(), 
            opcode, 
            args: v,
        }
    },

    // Access by index:
    // [1,2,3][1]
    // List(1,2,3)[1]
    <n:DotCall> "[" <idx: Number> "]" => {
        QuintEx::QuintApp{
            id: id.get(), 
            opcode: "nth".into(), 
            args: vec![n, idx],
        }
    },
    LiteralList,
    Term,
}

// Change to Atom?
Term: QuintEx = {
    Number, 
    Str,
    Boolean,
    "(" <e:Expression> ")" => e,
    "{" <e:Expression> "}" => e,
    "("")" => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "Tup".into(),
            args: vec![]
        }
    },
    
}

TupleItem: QuintEx = {
    "." "_" <value: Number> => <>
}

Tuple: QuintEx = {
    "(" <args: CommaTwo<Expression>> ")" => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "Tup".into(),
            args,
        }
    },
    // With item
    "(" <args: CommaTwo<Expression>> ")" <idx: TupleItem> => {
        //args.push(idx);
        let a = QuintEx::QuintApp{
            id:id.get(), 
            opcode: "Tup".into(),
            args,
        };
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "item".into(),
            args: vec![a, idx]
        }
    },
}

LiteralList: QuintEx = {
    "[" <args:Comma<Term>> "]" => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "List".into(), 
            args,
        }
    },
}

CallName: QuintName = {
    AndOrOps,
    Identifier,
}

Identifier: QuintName = {
    <name:LowId> => name.into(),
    <name:CapId> => name.into(),
    "Set" => "Set".into(),
    "List" => "List".into(),
}
Number: QuintEx = {
    <value:Int> => QuintEx::QuintInt{id: id.get(), value},
    <value:Hex> => QuintEx::QuintInt{id: id.get(), value},
}
Str: QuintEx = {
    <value:String> => QuintEx::QuintStr{id: id.get(), value: value.into()}
}
Boolean: QuintEx = {
    <value:Bool> => QuintEx::QuintBool{id: id.get(), value}
}

// macros for handling arguments: (1,2,), etc..
#[inline]
Comma<T>: Vec<T> = {
    => Vec::new(),
    CommaOne<T> => <>,
};
CommaOne<T>: Vec<T> = {
    <e:T> <v:("," <T>)*> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};
CommaTwo<T>: Vec<T> = {
    <e:T> <v:("," <T>)+> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};


// Lexer mapping
extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    Int => Token::Int(<i64>),
    Hex => Token::Hex(<i64>),
    Bool => Token::Bool(<bool>),
    CapId => Token::CapId(<String>),
    LowId => Token::LowId(<String>),
    String => Token::String(<String>),

    "+" => Token::Add,
    "-" => Token::Sub,
    "*" => Token::Mul,
    "/" => Token::Div,
    "%" => Token::Mod,

    "=" => Token::Assign,
    "==" => Token::EQ,
    "!=" => Token::NE,
    ">" => Token::GT,
    "<" => Token::LT,
    ">=" => Token::GE,
    "<=" => Token::LE,

    "," => Token::Comma,
    ":" => Token::Colon,
    ";" => Token::SemiColon,
    "::" => Token::DoubleColon,
    "." => Token::Period,
    "'" => Token::Prime,
    "|" => Token::Pipe,
    "->" => Token::Arrow,
    "=>" => Token::DoubleArrow,
    "^" => Token::Hat,
    "_" => Token::Underscore,
    "..." => Token::Ellipsis,

    "(" => Token::LParen,
    ")" => Token::RParen,
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "[" => Token::LBracket,
    "]" => Token::RBracket,

    "module" => Token::Module,
    "const" => Token::Const,
    "assume" => Token::Assume,
    "var" => Token::Var,
    "val" => Token::Val,
    "def" => Token::Def,
    "pure" => Token::Pure,
    "action" => Token::Action,
    "temporal" => Token::Temporal,
    "nondet" => Token::Nondet,
    "run" => Token::Run,

    "all" => Token::All,
    "any" => Token::Any,
    "all" => Token::All,
    "if" => Token::If,
    "iff" => Token::Iff,
    "else" => Token::Else,
    "and" => Token::And,
    "or" => Token::Or,
    "implies" => Token::Implies,
    "match" => Token::Match,

    "Set" => Token::Set,
    "List" => Token::List,

    "import" => Token::Import,
    "export" => Token::Export,

    "as" => Token::As,
    "from" => Token::From,

    "type" => Token::Type,
    "str" => Token::TypeStr,
    "int" => Token::TypeInt,
    "bool" => Token::TypeBool,

    "/*" => Token::Comment,
  }
}
