use crate::{QuintEx, QuintName};
use crate::utils::QuintIdGenerator;
use crate::lexer::{Token, LexicalError};

grammar(id: &mut QuintIdGenerator);

// Change entry to pub Quint:
// Using tiers, you work from bottom up...
// reverse of below...
// 
// So, Term, would be the last tier called
// See the Python work...
// 
// Focus on Expressions first...
// Flow (notional): 
// 1. Set/List
// 2  Relationships
// 3  Add/Sub
// 4  mul/div/..
// 5  pow
// 6  dot call
// 7  term

// BUT *HOW* to the flow happen...?

pub Expression: QuintEx = {
    // Try test Set, then list
    SetOrList,
}


// *** FOCUS FROM HERE AND BELOW *** //
// This is the approach to take


// [Term, Term,...]
ListLikePattern: Vec<QuintEx> = {
     "[" <args:Comma<Term>> "]" => <>
}

// (Term, Term)
CallLikePattern: Vec<QuintEx> = {
    "(" <args:Comma<Term>> ")" => <>
}

// A list can be: [1,2], or List[1,2]
ListExp: QuintEx = {
    LiteralList,
    "List" <a:LiteralList> => <>,
    ArithmeticExp,
}

// [1,2,3]
LiteralList: QuintEx = {
    <args:ListLikePattern> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "List".into(), 
            args,
        }
    },
}

Set: QuintEx = {
    "Set" <args:CallLikePattern> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "Set".into(), 
            args,
        }
    },
}

// Set(1,2,3)
SetOrList: QuintEx = {
    Set,
    ListExp,
}

//** Precedence built in the flow... **//
ArithmeticExp: QuintEx = {
    <lhs:ArithmeticExp> "+" <rhs:MulDivModExp> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "iadd".into(), 
            args: vec![<>],
        }
    },
    <lhs:ArithmeticExp> "-" <rhs:MulDivModExp> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "isub".into(), 
            args: vec![<>],
        }
    },
    MulDivModExp,
}

MulDivModExp: QuintEx = {
    <lhs:MulDivModExp> "*" <rhs:Term> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "imul".into(), 
            args: vec![<>],
        }
    },
    <lhs:MulDivModExp> "/" <rhs:Term> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "idiv".into(), 
            args: vec![<>],
        }
    },
    <lhs:MulDivModExp> "%" <rhs:Term> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "imod".into(), 
            args: vec![<>],
        }
    },
    PowExp,
}

// Note: right associative
PowExp: QuintEx = {
    <lhs:MulDivModExp> "^" <rhs:Term> => {
        QuintEx::QuintApp{
            id:id.get(), 
            opcode: "ipow".into(), 
            args:  vec![lhs, rhs],
        }
    },
    DotCall,
}

// dotCall
// TODO: Pickup here: should handle more than just 'Set'
// Can be:
// [].tail().nth(1)
DotCall: QuintEx = {
    <l:Set> "." <opcode: Identifier> "(" <mut arg:Expression*> ")" => {
        let mut v = vec![l];
        v.append(&mut arg);
        QuintEx::QuintApp{
            id: id.get(), 
            opcode, 
            args: v,
        }
    },
    Term,
}

// Change to Atom?
Term: QuintEx = {
    Number, 
    Str,
    Boolean,
    "(" <e:Expression> ")" => e,
    "{" <e:Expression> "}" => e,
}

Number: QuintEx = {
    <value:Int> => QuintEx::QuintInt{id: id.get(), value}
}
Str: QuintEx = {
    <value:String> => QuintEx::QuintStr{id: id.get(), value: value.into()}
}
Boolean: QuintEx = {
    <value:Bool> => QuintEx::QuintBool{id: id.get(), value}
}
Identifier: QuintName = {
    <name:LowId> => name.into(),
    <name:CapId> => name.into(),
}



// macros for handling arguments: (1,2,), etc..
#[inline]
Comma<T>: Vec<T> = {
    => Vec::new(),
    CommaOne<T> => <>,
};
CommaOne<T>: Vec<T> = {
    <e:T> <v:("," <T>)*> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};
CommaTwo<T>: Vec<T> = {
    <e:T> <v:("," <T>)+> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};


// Lexer
extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    Int => Token::Int(<i64>),
    Bool => Token::Bool(<bool>),
    CapId => Token::CapId(<String>),
    LowId => Token::LowId(<String>),
    String => Token::String(<String>),

    "+" => Token::Add,
    "-" => Token::Sub,
    "*" => Token::Mul,
    "/" => Token::Div,
    "%" => Token::Mod,

    "=" => Token::Assign,
    "==" => Token::EQ,
    "!=" => Token::NE,
    ">" => Token::GT,
    "<" => Token::LT,
    ">=" => Token::GE,
    "<=" => Token::LE,

    "," => Token::Comma,
    ":" => Token::Colon,
    ";" => Token::SemiColon,
    "::" => Token::DoubleColon,
    "." => Token::Period,
    "'" => Token::Prime,
    "|" => Token::Pipe,
    "->" => Token::Arrow,
    "=>" => Token::DoubleArrow,
    "^" => Token::Hat,
    "_" => Token::Underscore,
    "..." => Token::Ellipsis,

    "(" => Token::LParen,
    ")" => Token::RParen,
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "[" => Token::LBracket,
    "]" => Token::RBracket,

    "module" => Token::Module,
    "const" => Token::Const,
    "assume" => Token::Assume,
    "var" => Token::Var,
    "val" => Token::Val,
    "def" => Token::Def,
    "pure" => Token::Pure,
    "action" => Token::Action,
    "temporal" => Token::Temporal,
    "nondet" => Token::Nondet,
    "run" => Token::Run,

    "all" => Token::All,
    "any" => Token::Any,
    "all" => Token::All,
    "if" => Token::If,
    "iff" => Token::Iff,
    "else" => Token::Else,
    "and" => Token::And,
    "or" => Token::Or,
    "implies" => Token::Implies,
    "match" => Token::Match,

    "Set" => Token::Set,
    "List" => Token::List,

    "import" => Token::Import,
    "export" => Token::Export,

    "as" => Token::As,
    "from" => Token::From,

    "type" => Token::Type,
    "str" => Token::TypeStr,
    "int" => Token::TypeInt,
    "bool" => Token::TypeBool,

    "/*" => Token::Comment,
  }
}
